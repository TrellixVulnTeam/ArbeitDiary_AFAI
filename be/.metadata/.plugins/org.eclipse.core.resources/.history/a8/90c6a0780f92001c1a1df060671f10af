package com.arbietDiary.arbietdiary.datemember.service.impl;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

import org.springframework.stereotype.Service;

import com.arbietDiary.arbietdiary.calendar.entity.Date;
import com.arbietDiary.arbietdiary.datemember.service.DateMemberService;

@Service
public class DateMemberServiceImpl implements DateMemberService{
	
	@Override
	public int[] getTodayDay(){
		String now = formatDtToString(LocalDateTime.now());
		int[] day = new int[3]; 
		day[0] = Integer.parseInt(now.substring(0,2));
		day[1] = Integer.parseInt(now.substring(2,4));
		day[2] = Integer.parseInt(now.substring(4));
		return day;
	}
	
	public String formatDtToString(LocalDateTime regDt) {
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyMMdd");
		return regDt != null ? regDt.format(formatter) : "";
	}
	
	@Override
	public List<Date> exceptAutoTime(Long projectId, Long calendarId){		
		int[] day = getTodayDay();
		Optional<Date> today = dateRepository.findByCalendarCalendarIdAndYearAndMonthAndDay(calendarId, day[0], day[1], day[2]);
		System.out.println("Heeo");

		List<Date> dates = dateRepository.findAllByCalendarIdAndDateId(calendarId, today.get().getDateId());		
		CalendarUserList calendarUserList = projectService.getUserList(projectId);
		CalendarDto calendarDto = new CalendarDto(calendarUserList); 
		CalendarDto result = calendarService.addWorkTime(calendarDto);
		List<UserLists> userList = result.getUserList();

		List<Date> dateWork = new ArrayList<Date>();
		List<DateMember> deleteWork = new ArrayList<DateMember>();
		for(Date date : dates) {
			List<DateMember> dayWorkers = date.getDateMember();
			if(dayWorkers.isEmpty()) {
				// 근문자가 없음
				dateWork.add(date);
				continue;
			}
			
			/*
			 * 근무자들 : 대타 + 고정 근무자
			 */
			List<DateMember> newWorker = new ArrayList<DateMember>();
			for(DateMember worker : dayWorkers) {
				System.out.println("[DateMember ID] : "+worker.getId());
				boolean isCoverWorker = true;
				// 고정 근무자들 확인
				for(UserLists user : userList) {
					System.out.println(worker.getUserId()+":"+user.getUserId());
					if(!worker.getUserId().equals(user.getUserId())) {
						System.out.println("ㅈ같네");
						//근무자들과 고정 근무자가 다름 = 대타자 놔둠
						continue;
					}
					
					
					//같으면
					isCoverWorker = false;
					for(FixedTimes time : user.getFixedtimes()) {
						System.out.println("[before]" + time.getWorktime() + ":" + worker.getWorkTime());
						System.out.println(time.getDayId() + ":" + date.getDayOfWeek());
						if(!time.getDayId().equals(date.getDayOfWeek())){
							// 해당 날짜 아님
							continue;
						}
						if(!isWorkTime(time.getWorktime())) {
							//일 하지 않는 날
							continue;
						}
						System.out.println("[일하네요]");
						// 일 하는 날
						String compWorkTime = time.getWorktime();
						StringBuilder resetWorkTime = new StringBuilder(worker.getWorkTime());
						boolean isAddTime = false;
						for(int i=0; i < TIMELENGTH; i++) {
							if(compWorkTime.charAt(i) == '1') {
								resetWorkTime.setCharAt(i, '0');
							} else if(resetWorkTime.charAt(i) == '1') {
								isAddTime = true;
							}
						}
						System.out.println("[After]" + resetWorkTime);
						if(isAddTime) {
							worker.setWorkTime(resetWorkTime.toString());
							newWorker.add(worker);
						}
						deleteWork.add(worker);
						break;
					}
					break;
				}	
				if(isCoverWorker) {
					//대타자
					newWorker.add(worker);
					deleteWork.add(worker);
				}	
			}
			date.setDateMember(newWorker);
			dateWork.add(date);
		}
		
		dateMemberRepository.deleteAll(deleteWork);
		return dateWork;
	}
}
