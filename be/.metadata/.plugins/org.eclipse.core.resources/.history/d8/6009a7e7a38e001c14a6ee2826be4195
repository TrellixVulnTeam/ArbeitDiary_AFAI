package com.arbietDiary.arbietdiary.configuration;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

@Configuration
public class SecurityConfiguration extends WebSecurityConfigurerAdapter{
	
	@Bean
	PasswordEncoder getPasswordEncoder() {
		System.out.println("[Bean등록 : PasswordEncoder]");
		return new BCryptPasswordEncoder();
	}
	
	@Bean
	public JwtAuthenticationFilter jwtAuthenticationFilter() throws Exception {
		System.out.println("[Bean등록 : JwtAuthenticationFilter]");
		JwtAuthenticationFilter jwtAuthenticationFilter = new JwtAuthenticationFilter(authenticationManager());
		jwtAuthenticationFilter.setUsernameParameter("userId");
		jwtAuthenticationFilter.setPasswordParameter("userPassword");
		return jwtAuthenticationFilter;
	}
	
	@Override
	protected void configure(HttpSecurity http) throws Exception{
		http.csrf().disable();
		
		// JWT 토큰용
		//http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
		
		http.formLogin()
				.loginPage("/member/login")
				.usernameParameter("userId")
				.passwordParameter("userPassword")
				.successHandler(null)
				.permitAll()
			.and()
			.httpBasic().disable() // httpBasic 방식 사용 X
			.addFilter(jwtAuthenticationFilter());
		
		http.logout()
			.logoutRequestMatcher(new AntPathRequestMatcher("/member/logout"))
			.logoutSuccessUrl("/")
			.invalidateHttpSession(true); // 로그아웃시 모두 삭제
		
		http.authorizeRequests()
			.antMatchers("/"
					,"/member/login"
					,"/member/register"
					,"/member/email-auth"
					,"/member/find/password"
					,"/member/find/email"
					,"/member/reset/password")
			.permitAll();
			
		http.authorizeRequests()
			.antMatchers("/member/info")
			.access("hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')");
		
		super.configure(http);
	}
}
